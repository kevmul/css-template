// ADDS A BROWSER PREFIX TO THE PROPERTY
=css3-prefix($property, $value)
  -webkit-#{$property}: #{$value}
  -khtml-#{$property}: #{$value}
  -moz-#{$property}: #{$value}
  -ms-#{$property}: #{$value}
  -o-#{$property}: #{$value}
  #{$property}: #{$value}

// BACKGROUND GRADIENT
=background-gradient($startColor: #3C3C3C, $endColor: #999999)
  background-color: $startColor
  background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor))
  background-image: -webkit-linear-gradient(top, $startColor, $endColor)
  background-image: -moz-linear-gradient(top, $startColor, $endColor)
  background-image: -ms-linear-gradient(top, $startColor, $endColor)
  background-image: -o-linear-gradient(top, $startColor, $endColor)
  background-image: linear-gradient(top, $startColor, $endColor)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}')

// BACKGROUND HORIZONTAL
=background-horizontal($startColor: #3C3C3C, $endColor: #999999)
  background-color: $startColor
  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor))
  background-image: -webkit-linear-gradient(left, $startColor, $endColor)
  background-image: -moz-linear-gradient(left, $startColor, $endColor)
  background-image: -ms-linear-gradient(left, $startColor, $endColor)
  background-image: -o-linear-gradient(left, $startColor, $endColor)
  background-image: linear-gradient(left, $startColor, $endColor)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1')

// BACKGROUND RADIAL
=background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos: 100%)
  background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos, $startColor), color-stop($endPos, $endColor))
  background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
  background: -o-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
  background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos)
  background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos)

// BACKGROUND VERTICAL THREE COLOR
// =background-gradient-three($startColor: #FFFFFF, $startPos: 0%, $midColor: #000000)
//TODO: Finish this method

// BACKGROUND SIZE
=background-size($width: 100%, $height: $width)
  @if type-of($width) == "number" and $height != null
    +css3-prefix("background-size", $width $height)
  @else
    +css3-prefix("background-size", $width)

// BACKGROUND COLOR OPACITY
=background-opacity($color: #000, $opacity: 0.85)
  background: $color
  background: rgba($color, $opacity)

// BORDER RADIUS
=border-radius($radius: 5px)
  +css3-prefix("border-radius", $radius)

=border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px)
  -webkit-border-top-left-radius: $topLeftRadius
  -webkit-border-top-right-radius: $topRightRadius
  -webkit-border-bottom-right-radius: $bottomRightRadius
  -webkit-border-bottom-left-radius: $bottomLeftRadius
  -moz-border-radius-topleft: $topLeftRadius
  -moz-border-radius-topright: $topRightRadius
  -moz-border-radius-bottomright: $bottomRightRadius
  -moz-border-radius-bottomleft: $bottomLeftRadius
  border-top-left-radius: $topLeftRadius
  border-top-right-radius: $topRightRadius
  border-bottom-right-radius: $bottomRightRadius
  border-bottom-left-radius: $bottomLeftRadius

// BOX
=box($orient: horizontal, $pack: center, $align: center)
  display: -webkit-box
  display: -moz-box
  display: box
  +css3-prefix("box-orient", $orient)
  +css3-prefix("box-pack", $pack)
  +css3-prefix("box-align", $align)

// BOX RGBA
=box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C)
  background-color: transparent
  background-color: rgba($r, $g, $b, $opacity)
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}')
  zoom: 1

// BOX SHADOW
=box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: "")
  @if $inset != ""
    +css3-prefix("box-shadow", $inset $x $y $blur $color)
  @else
    +css3-prefix("box-shadow", $x $y $blur $color)

// BOX SIZING
=box-sizing($type: border-box)
  +css3-prefix("box-sizing", $type)

// COLUMNS
=columns($count: 3, $gap: 10)
  +css3-prefix("column-count", $count)
  +css3-prefix("column-gap", $gap)

// DOUBLE BORDERS
=double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0)
  border: 1px solid $colorOne
  +css3-prefix("box-shadow", 0 0 0 1px $colorTwo)
  +border-radius($radius)

// FLEX
=flex($value: 1)
  +css3-prefix("box-flex", $value)

// FLIP
=flip($scaleX: -1)
  +css3-prefix("transform", scaleX($scaleX))
  filter: FlipH
  -ms-filter: "FlipH"

// FONT FACE
=font-face($fontFamily: myFont, $eotFileSrc: "myFont.eot", $woffFileSrc: "myFont.woff", $ttfFileSrc: "myFont.ttf", $svgFileSrc: "myFont.svg", $svgFontID: "#myFont")
  font-family: $fontFamily
  src: url($eotFileSrc) format("eot"), url($woffFileSrc) format("woff"), url($ttfFileSrc) format("truetype"), url($svgFileSrc + $svgFontID) format("svg")

// OPACITY
=opacity($opacity: 0.5)
  $opacityMultiplied: $opacity * 100
  filter: alpha(opacity = $opacityMultiplied)
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")"
  +css3-prefix("opacity", $opacity)

// OUTLINE RADIUS
=outline-radius($radius: 5px)
  +css3-prefix("outline-radius", $radius)

// RESIZE
=resize($direction: both)
  +css3-prefix("resize", $direction)

// ROTATE
=rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0)
  +css3-prefix("transform", rotate($deg + deg))
  filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand')
  zoom: 1

// TEXT SHADOW
=text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4))
  text-shadow: $x $y $blur $color

// TRANSFORM
=transform($params)
  +css3-prefix("transform", $params)

// TRANSFORM-ORIGIN
=transform-origin($params)
  +css3-prefix("transform-origin", $params)

// TRANSFORM STYLE
=transform-style($style: preserve-3d)
  +css3-prefix("transform-style", $style)

// TRANSITION
=transition($properties...)
  @if length($properties) >= 1
    +css3-prefix("transition", $properties)
  @else
    +css3-prefix("transition", "all 0.2s ease-in-out 0s")

// TRIPLE BORDERS
=triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0)
  border: 1px solid $colorOne
  +border-radius($radius)
  +css3-prefix("box-shadow", "0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}")

// KEYFRAMES
=keyframes($animation-name)
  @-webkit-keyframes #{$animation-name}
    @content

  @-moz-keyframes #{$animation-name}
    @content

  @-ms-keyframes #{$animation-name}
    @content

  @-o-keyframes #{$animation-name}
    @content

  @keyframes #{$animation-name}
    @content

// ANIMATION
=animation($str)
  +css3-prefix("animation", $str)

// CLEARFIX
=clearfix
  &
    *zoom: 1
  &:before,
  &:after
    content: ""
    display: table
  &:after
    clear: both

=e($element)
  @at-root #{&}__#{$element}
    @content

=m($modifier)
  @at-root #{&}--#{$modifier}
    @content
    
@function tint($color, $percentage)
  @return mix(white, $color, $percentage)

@function shade($color, $percentage)
  @return mix(black, $color, $percentage)


// LibSass uses this function a LOT better than RubySass.
// Not sure why.

@function set-text-color($color, $original: black)
  @if lightness($color) > 50
    @return darken($original, 30%)
  @else
    @return lighten($original, 30%)

=font-size($size) 
  $remValue: $size / 16
  $pxValue: ($size)
  font-size: $pxValue + px
  font-size: $remValue + rem

=line-height($size) 
  $remValue: $size / 16
  $pxValue: ($size)
  line-height: $pxValue + px
  line-height: $remValue + rem

=noSelect()
  -webkit-touch-callout: none
  +css3-prefix("user-select", "none")

=breakpoint($from, $to:null)
  @if $to == null 
    @media only screen and (min-width: $from)
      @content
  @else 
    @media only screen and (min-width: $from) and (max-width: $to)
      @content
